# Prompt d’implémentation : Migration Python/Selenium → Extension Chrome + Netlify

## Contexte

Tu dois migrer un script Python basé sur Selenium vers une solution web composée :

* d’une **extension Chrome** (automatisation visible, sans serveur) ;
* d’une **application Netlify** déjà déployée (hébergement statique, dépôt GitHub existant).

Le script automatise la consultation de **la carte de la végétation potentielle** et **la carte des sols** pour extraire des données géographiques.

**Source unique à analyser** : le fichier **`Python pour application.py`**, situé à la racine du dépôt.

> **Important** : n’intègre que les fonctions relatives à la végétation potentielle et aux sols ; ignore tout traitement fichier (Excel, Word, etc.).

## Contraintes techniques

* Navigation uniquement avec Google Chrome.
* Aucune infrastructure backend ; tout traitement côté client.
* Automatisation 100 % visible (équivalent Selenium).
* Données d’entrée : localisation choisie par l’utilisateur dans l’onglet « Contexte éco » de l’app Netlify.

## Instructions d’implémentation (≤ 4 étapes)

### ÉTAPE 1 : Analyse et architecture

**Objectif** : extraire la logique pertinente du script et définir l’architecture cible.

1. **Analyse du fichier `Python pour application.py`** :

   * Actions Selenium à reproduire (végétation, sols).
   * Sélecteurs des sites cibles.
   * Flux de données sans traitements de fichiers.
2. **Architecture technique** :

   * Fonctions implantées dans l’app Netlify.
   * Actions gérées par l’extension Chrome.
   * Protocole (messaging) entre les deux.
   * Schéma des données échangées.
3. **Plan de migration** :

   * Répartition des responsabilités.
   * Ordre d’implémentation.
   * Risques techniques.

**Livrable** : document d’architecture map­pant Python → JavaScript/Extension.

### ÉTAPE 2 : Développement de l’extension Chrome

**Objectif** : automatiser les actions sur les sites externes.

1. **Structure** : manifest V3, service-worker, content-scripts dédiés, popup au besoin.
2. **Automatisation** :

   * Reproduction des actions Selenium (cartes végétation + sols).
   * Saisie des coordonnées, navigation, extraction, capture éventuelle.
   * Gestion erreurs/cas limites.
3. **Communication** :

   * Messaging bidirectionnel avec l’app Netlify.
   * Gestion des événements et callbacks.

**Livrable** : extension fonctionnelle.

### ÉTAPE 3 : Adaptation de l’app Netlify

**Objectif** : intégrer l’interface et le traitement client.

1. **UI** :

   * Intégration à la carte « Contexte éco ».
   * Bouton de lancement, barre de progression, affichage résultats.
2. **Traitement client** :

   * Envoi des coordonnées à l’extension.
   * Réception et affichage des données végétation/sols.
3. **Communication** : détection de l’extension, gestion erreurs/états.

**Livrable** : application Netlify mise à jour.

### ÉTAPE 4 : Intégration & tests

**Objectif** : valider le flux complet.

1. Connexion Netlify ↔ extension, optimisation.
2. Tests sur les sites réels, vérification des données, cas d’erreur.
3. Documentation (installation extension, guide utilisateur), mise à jour GitHub, déploiement Netlify.

**Livrable** : solution complète, testée, documentée.

## Format de réponse attendu

Pour chaque étape, fournis :

* **Code source complet** commenté.
* **Instructions d’installation** pas à pas.
* **Exemples d’utilisation** (captures d’écran si utile).
* **Gestion des erreurs** et cas limites.
* **Tests de validation** détaillés.

## Critères de validation finale

✅ Sélection d’une localisation dans « Contexte éco ».
✅ Lancement de l’automatisation visible dans Chrome.
✅ Navigation automatique (cartes végétation / sols).
✅ Récupération & affichage des données géographiques.
✅ Expérience utilisateur fluide, robuste, maintenable.
